// Generated by CoffeeScript 1.9.1
(function() {
  var FileSystem, Liquid, Promise, fs, path, readFile,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Liquid = require('liquid-node');

  Promise = require('bluebird');

  fs = require('fs');

  path = require('path');

  readFile = function(fpath, encoding) {
    return new Promise(function(resolve, reject) {
      return fs.readFile(fpath, encoding, function(err, content) {
        if (err) {
          return reject(err);
        } else {
          return resolve(content);
        }
      });
    });
  };

  FileSystem = (function(superClass) {
    var PathPattern;

    extend(FileSystem, superClass);

    PathPattern = /^[^.\/][a-zA-Z0-9-_\/]+$/;

    function FileSystem() {
      var encoding, extensions, root;
      root = arguments[0], encoding = arguments[1], extensions = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      if (encoding == null) {
        encoding = 'utf-8';
      }
      this.root = root;
      this.encoding = encoding;
      this.extensions = [''].concat(extensions);
    }

    FileSystem.prototype.readTemplateFile = function(templatePath) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          if (!PathPattern.test(templatePath)) {
            reject(new Liquid.ArgumentError("Illegal template name '" + templatePath + "'"));
          }
          return resolve(_this.readTemplateFiles(templatePath));
        };
      })(this))["catch"](function(err) {
        throw new Liquid.FileSystemError("Error loading template: " + err.message);
      });
    };

    FileSystem.prototype.readTemplateFiles = function(templatePath) {
      return Promise.some(this.extensions.map((function(_this) {
        return function(extension) {
          return readFile(path.resolve(_this.root, templatePath + extension), _this.encoding);
        };
      })(this)), 1).then(function(results) {
        return results[0];
      });
    };

    return FileSystem;

  })(Liquid.BlankFileSystem);

  module.exports = FileSystem;

}).call(this);
