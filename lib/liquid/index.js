// Generated by CoffeeScript 1.9.1
(function() {
  var Liquid, Promise, engine, highlight, md,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Promise = require('bluebird');

  Liquid = require('liquid-node');

  md = require('../markdown');

  highlight = require('../highlight');

  engine = new Liquid.Engine;

  engine.registerTag("highlight", (function() {
    var HighlightBlock;
    return HighlightBlock = (function(superClass) {
      extend(HighlightBlock, superClass);

      function HighlightBlock() {
        return HighlightBlock.__super__.constructor.apply(this, arguments);
      }

      HighlightBlock.prototype.render = function(context) {
        return highlight.render(this.nodelist.join('').trim(), this.markup);
      };

      return HighlightBlock;

    })(Liquid.Block);
  })());

  engine.registerTag("post_url", (function() {
    var PostUrl;
    return PostUrl = (function(superClass) {
      extend(PostUrl, superClass);

      function PostUrl(template, tagName, markup) {
        this.postPath = markup.trim();
        PostUrl.__super__.constructor.apply(this, arguments);
      }

      PostUrl.prototype.render = function(context) {
        var j, len, post, ref;
        ref = engine.site.posts;
        for (j = 0, len = ref.length; j < len; j++) {
          post = ref[j];
          if (post.path.split('_posts/').pop().replace(/\.\w+/, '') === this.postPath) {
            return post.url;
          }
        }
      };

      return PostUrl;

    })(Liquid.Tag);
  })());

  engine.registerFilters({
    date_to_xmlschema: function(input) {
      return this.date(input, '%Y-%m-%dT%H:%M:%S%z').replace(/00$/, ':00');
    },
    date_to_rfc822: function(input) {
      return this.date(input, '%a, %d %b %Y %H:%M:%S %z');
    },
    date_to_string: function(input) {
      return this.date(input, '%d %b %Y');
    },
    date_to_long_string: function(input) {
      return this.date(input, '%d %B %Y');
    },
    xml_escape: function(input) {
      if (input == null) {
        return input;
      }
      return input.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&apos;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    },
    cgi_escape: function(input) {
      input || (input = '');
      return encodeURIComponent(input).replace(/%20/g, '+');
    },
    uri_escape: function(input) {
      input || (input = '');
      return encodeURI(input).replace(/#/g, '%23');
    },
    array_to_sentence_string: function(input) {
      var i, item, j, len, res;
      res = '';
      for (i = j = 0, len = input.length; j < len; i = ++j) {
        item = input[i];
        if (i + 1 === input.length) {
          res += 'and ' + item;
        } else {
          res += '' + item + ', ';
        }
      }
      return res;
    },
    markdownify: function(input) {
      return md(input);
    },
    jsonify: function(input) {
      return JSON.stringify(input);
    }
  });

  module.exports = engine;

}).call(this);
